package ReservedJavaWords;

import java.util.Arrays;

public class ReservedWords {

	public static final String[] ReservedJavaWords = {
			
			"abstract", "assert", "boolean", "break", "byte", "case",
			
			"catch", "char", "class", "continue", "default", "do", "double",
			
			"else", "enum", "extends", "final", "finally", "float",
			
			"for", "if", "implements", "import", "instanceof", "int", "interface",
			
			"long", "native", "new", "null", "package", "private", "protected", "public",
			
			"return", "short", "static", "strcitfp", "super", "switch", "synchronized",
			
			"this", "throw", "throws", "transient", "try", "void", "volatile", "while"

	};
	
	public static void main(String[] args) {
		
		Arrays.sort(ReservedJavaWords); // sets them in order
		
		//sorts them in a column containing four 
		
		System.out.println("Reserved words in Java");
		for(int i = 0; i < ReservedJavaWords.length; i++) {
			
			System.out.printf("%-16s", ReservedJavaWords[i]);
			
			if((i+1)% 4 == 0) // makes four words per column
				
				System.out.println("\n");
	
		}
		
		System.out.println("\n Definition");
		abstract_();
		assert_();
		boolean_();
		break_();
		byte_();
		case_();
		catch_();
		char_();
		class_();
		continue_();
		const_();
		default_();
		do_();
		double_();
		else_();
		enum_();
		exports_();
		extends_();
		final_();
		finally_();
		float_();
		for_();
		if_();
		implements_();
		import_();
		instanceof_();
		int_();
		interface_();
		long_();
		native_();
		new_();
		null_();
		package_();
		private_();
		protected_();
		public_();
		return_();
		short_();
		static_();
		strictfp_();
		super_();
		switch_();
		synchronized_();
		this_();
		throw_();
		throws_();
		transient_();
		try_();
		void_();
		volatile_();
		while_();		
	}
	
	public static void abstract_() {
		
		System.out.println("\nabstract is A non-access modifier. "
				+ "Used for classes and methods: An abstract class cannot be "
				+ "used to create objects (to access it, it must be inherited from another class). "
				+ "An abstract method can only be used in an abstract class, and it does not have a body. "
				+ "The body is provided by the subclass (inherited from)");
	}
	
    public static void assert_() {
		
		System.out.println("\nassert is for debugging");
	}
    public static void boolean_() {
		
		System.out.println("\nboolean is a data type that can only store true or false");
	}
    
    public static void break_() {
		
		System.out.println("\nbreak is a Breaks out of a loop or a switch block");
	}
    
    public static void byte_() {
    	
    	System.out.println("\nbyte is a data type that can store whole numbers from -128 and 127");
    }
    
    public static void case_() {
    	
    	System.out.println("\nCase Marks a block of code in switch statements ");
    }
    
   public static void catch_() {
    	
    	System.out.println("\nCatches exceptions generated by try statements");
    }
   
   public static void char_() {
   	
   	System.out.println("\nChar A data type that is used to store a single character");
   }
   
   public static void class_() {
	   	
	   	System.out.println("\nClass Defines a class");
	   }
   public static void continue_() {
	   	
	   	System.out.println("\nContinues to the next iteration of a loop");
	   }
   public static void const_() {
	   	
	   	System.out.println("\nConst - Defines a constant. Not in use - use final instead");
	   }
   public static void default_() {
	   	
	   	System.out.println("\nDefault - Specifies the default block of code in a switch statement");
	   }
   
   public static void do_() {
	   	
	   	System.out.println("\nDo - Used together with while to create a do-while loop");
	   }
   
   public static void double_() {
	   	
	   	System.out.println("\nDouble - A data type that can store whole numbers from 1.7e−308 to 1.7e+308");
	   }
   
   public static void else_() {
	   	
	   	System.out.println("\nElse - Used in conditional statements");
	   }
   
   public static void enum_() {
	   	
	   	System.out.println("\nEnum - Declares an enumerated (unchangeable) type");
	   }
   
   public static void exports_() {
	   	
	   	System.out.println("\nExports a package with a module. New in Java 9");
	   }
   
   public static void extends_() {
	   	
	   	System.out.println("\nExtends a class (indicates that a class is inherited from another class)");
	   }
   
   public static void final_() {
	   	
	   	System.out.println("\nFinal - A non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override)");
	   }
   
   public static void finally_() {
	   	
	   	System.out.println("\nFinally - Used with exceptions, a block of code that will be executed no matter if there is an exception or not");
	   }
   public static void float_() {
	   	
	   	System.out.println("\nFloat - A data type that can store whole numbers from 3.4e−038 to 3.4e+038");
	   }
   public static void for_() {
	   	
	   	System.out.println("\nFor - Create a for loop");
	   }
   public static void goto_() {
	   	
	   	System.out.println("\nGoto - Not in use, and has no function");
	   }
   public static void if_() {
	   	
	   	System.out.println("\nIf - Makes a conditional statement");
	   }
   public static void implements_() {
	   	
	   	System.out.println("\nImplements an interface");
	   }
   public static void import_() {
	   	
	   	System.out.println("\nImport - Used to import a package, class or interface");
	   }
   public static void instanceof_() {
	   	
	   	System.out.println("\nInstanceof - Checks whether an object is an instance of a specific class or an interface");
	   }
   public static void int_() {
	   	
	   	System.out.println("\nint - A data type that can store whole numbers from -2147483648 to 2147483647");
	   }
   public static void interface_() {
	   	
	   	System.out.println("\nInterface -	Used to declare a special type of class that only contains abstract methods");
	   }
   public static void long_() {
	   	
	   	System.out.println("\nLong - A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808");
	   }
   public static void module_() {
	   	
	   	System.out.println("\n Module - Declares a module. New in Java 9");
	   }
   public static void native_() {
	   	
	   	System.out.println("\nNative - Specifies that a method is not implemented in the same Java source file (but in another language)");
	   }
   public static void new_() {
	   	
	   	System.out.println("\nNew - Creates new objects");
	   }
   
   public static void null_() {
	   	
	   	System.out.println("\nNull - This indicates that a reference does not refer to anything");
	   }
   public static void package_() {
	   	
	   	System.out.println("\n Package - Declares a Package");
	   }
   public static void private_() {
	   	
	   	System.out.println("\n Private - An access modifier used for attributes, methods and constructors, making them only accessible within the declared class");
	   }
   public static void protected_() {
	   	
	   	System.out.println("\n Procteced - An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses");
	   }
   public static void public_() {
	   	
	   	System.out.println("\n Public - An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class");
	   }
   public static void requires_() {
	   	
	   	System.out.println("\n Requires - Specifies required libraries inside a module. New in Java 9");
	   }
   public static void return_() {
	   	
	   	System.out.println("\n Return - Finished the execution of a method, and can be used to return a value from a method");
	   }
   
   public static void short_() {
	   	
	   	System.out.println("\n Short - A data type that can store whole numbers from -32768 to 32767");
	   }
   
   public static void static_() {
	   	
	   	System.out.println("\n Static - A non-access modifier used for methods and attributes. "
	   			+ "Static methods/attributes can be accessed without creating an object of a class");
	   }
   
   public static void strictfp_() {
	   	
	   	System.out.println("\n strictfp - Restrict the precision and rounding of floating point calculations");
	   }
   
   public static void super_() {
	   	
	   	System.out.println("\n Super - Refers to superclass (parent) objects");
	   }
   public static void switch_() {
	   	
	   	System.out.println("\n Switch - Selects one of many code blocks to be executed");
	   }
   public static void synchronized_() {
	   	
	   	System.out.println("\n Synchronized - A non-access modifier, "
	   			+ "which specifies that methods can only be accessed by one thread at a time");
	   }
   public static void this_() {
	   	
	   	System.out.println("\n This - Refers to the current object in a method or constructor");
	   }
   public static void throw_() {
	   	
	   	System.out.println("\n Throw - Creates a custom error");
	   }
   public static void throws_() {
	   	
	   	System.out.println("\n Throws - Indicates what exceptions may be thrown by a method");
	   }
   public static void transient_() {
	   	
	   	System.out.println("\n Transient - A non-accesss modifier, which specifies that an attribute is not part of an object's persistent state");
	   }
   public static void try_() {
	   	
	   	System.out.println("\n Try - Creates a try...catch statement");
	   }
   public static void var_() {
	   	
	   	System.out.println("\n Var - Declares a variable. New in Java 10");
	   }
   
   public static void void_() {
	   	
	   	System.out.println("\n Void - Specifies that a method should not have a return value");
	   }
   
   public static void volatile_() {
	   	
	   	System.out.println("\n Volatile - Indicates that an attribute is not cached thread-locally, and is always read from the \"main memory\"");
	   }
   
   public static void while_() {
	   	
	   	System.out.println("\n While - Creates a while loop");
	   }
}
